# -*- coding: utf-8 -*-
"""Mumbai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/182LvkzWVm6mecOdR98GItGW0JEI_ZAPE
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the data
file_path = '/content/drive/MyDrive/personal_project_info/Mumbai[1].csv'
data = pd.read_csv(file_path)

#creating different columns like date, time, hour and year
data['Date']= pd.to_datetime(data['date']).dt.date
data['time']= pd.to_datetime(data['date']).dt.time
data['hour']= pd.to_datetime(data['date']).dt.hour
data['year']= pd.to_datetime(data['date']).dt.year

# drop extra date n time column
data= data.drop(columns=['date', 'time'])

#reindexing columns
data= data.reindex(columns=['Date', 'hour', 'year', 'temperature_2m', 'relative_humidity_2m', 'surface_pressure',
                          'wind_speed_10m', 'wind_direction_10m', 'rain'])

# get bool valued rain info
data.insert(8, 'bool_rain',True, allow_duplicates= True)

# set value for bool valued rain info
for i in range(len(data)):
  if(data['rain'][i] == 0.0): data['bool_rain'][i]= False

#the 2 outputs are the indices of data for year 2021-2023
for i in range(len(data)):
  if(data['year'][i]== 2021 and data['year'][i-1]!= 2021):
    print(i)

  if(data['year'][i]== 2023 and data['year'][i+1]!= 2023):
    print(i)

data1= pd.DataFrame(data= data[96432:122712])

# Features and target variables
features = ['temperature_2m', 'surface_pressure', 'wind_speed_10m', 'wind_direction_10m', 'rain']
print(data1[features].corr())

# Prepare data for predicting 'relative_humidity_2m' which is target
X_humidity = data[features]
y_humidity = data['relative_humidity_2m']


# Split data for predicting 'relative_humidity_2m'
X_train_humidity, X_test_humidity, y_train_humidity, y_test_humidity = train_test_split(X_humidity, y_humidity, test_size=0.2, random_state=42)

# Create and train Linear Regression model for predicting 'relative_humidity_2m'
lr_model_humidity = LinearRegression()
lr_model_humidity.fit(X_train_humidity, y_train_humidity)


# Make predictions for 'relative_humidity_2m'
y_pred_humidity = lr_model_humidity.predict(X_test_humidity)

# Evaluate the error
# Mean Absolute Percentage Error (can be calculated manually)
mape_humidity = np.mean(np.abs((np.array(y_test_humidity) - np.array(y_pred_humidity)) / np.array(y_test_humidity))) * 100
print(f'Mean Absolute Percentage Error (MAPE): {mape_humidity}')

# Plot actual vs predicted for 'relative_humidity_2m'
plt.scatter(y_test_humidity, y_pred_humidity, alpha= 0.4)
plt.xlabel('Actual Relative Humidity')
plt.ylabel('Predicted Relative Humidity')
plt.title('Actual vs Predicted Relative Humidity')
plt.show()